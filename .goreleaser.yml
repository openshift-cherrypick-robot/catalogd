
env:
- GOPROXY=https://proxy.golang.org|direct
- GO111MODULE=on
- CGO_ENABLED=0
before:
  hooks:
    - go mod tidy
    - go mod download
builds:
  - id: catalogd-controller
    main: ./cmd/manager/
    binary: bin/manager
    goos:
    - linux
    goarch:
    - amd64
    - arm64
    - ppc64le
    - s390x
    ldflags:
    - -X {{ .Env.VERSION_PKG }}.gitVersion={{ .Env.GIT_VERSION }}
  # TODO: When the apiserver is working properly, uncomment this
  # - id: catalogd-server
  #   main: ./cmd/apiserver/
  #   binary: bin/apiserver
  #   goos:
  #   - linux
  #   goarch:
  #   - amd64
  #   - arm64
  #   - ppc64le
  #   - s390x
  #   ldflags:
  #   - -X {{ .Env.VERSION_PKG }}.gitVersion={{ .Env.GIT_VERSION }}
  #   - -X {{ .Env.VERSION_PKG }}.gitCommit={{ .Env.GIT_COMMIT }}
  #   - -X {{ .Env.VERSION_PKG }}.gitTreeState={{ .Env.GIT_TREE_STATE }}
  #   - -X {{ .Env.VERSION_PKG }}.commitDate={{ .Env.COMMIT_DATE }}
dockers:
- image_templates:
  - "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-amd64"
  dockerfile: controller.Dockerfile
  goos: linux
  goarch: amd64
  use: buildx
  build_flag_templates:
    - "--platform=linux/amd64"
- image_templates:
    - "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-arm64"
  dockerfile: controller.Dockerfile
  goos: linux
  goarch: arm64
  use: buildx
  build_flag_templates:
    - "--platform=linux/arm64"
- image_templates:
    - "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-ppc64le"
  dockerfile: controller.Dockerfile
  goos: linux
  goarch: ppc64le
  use: buildx
  build_flag_templates:
    - "--platform=linux/ppc64le"
- image_templates:
    - "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-s390x"
  dockerfile: controller.Dockerfile
  goos: linux
  goarch: s390x
  use: buildx
  build_flag_templates:
    - "--platform=linux/s390x"
# TODO: When the apiserver is working properly, uncomment this:
# - image_templates:
#   - "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-amd64"
#   dockerfile: apiserver.Dockerfile
#   goos: linux
#   goarch: amd64
# - image_templates:
#     - "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-arm64"
#   dockerfile: apiserver.Dockerfile
#   goos: linux
#   goarch: arm64
# - image_templates:
#     - "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-ppc64le"
#   dockerfile: apiserver.Dockerfile
#   goos: linux
#   goarch: ppc64le
# - image_templates:
#     - "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-s390x"
#   dockerfile: apiserver.Dockerfile
#   goos: linux
#   goarch: s390x
docker_manifests:
- name_template: "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}"
  image_templates:
    - "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-amd64"
    - "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-arm64"
    - "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-ppc64le"
    - "{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-s390x"
# TODO: When the apiserver is working properly, uncomment this:
# - name_template: "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}"
#   image_templates:
#     - "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-amd64"
#     - "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-arm64"
#     - "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-ppc64le"
#     - "{{ .Env.APISERVER_IMAGE_REPO }}:{{ .Env.IMAGE_TAG }}-s390x"
release:
  disable: '{{ ne .Env.ENABLE_RELEASE_PIPELINE "true" }}'
  extra_files:
  - glob: 'catalogd.yaml'
  header: |
    ## Installation
    ```bash
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/{{ .Env.CERT_MGR_VERSION }}/cert-manager.yaml
    kubectl wait --for=condition=Available --namespace=cert-manager deployment/cert-manager-webhook --timeout=60s
    kubectl apply -f https://github.com/operator-framework/catalogd/releases/download/{{ .Tag }}/catalogd.yaml
    ```
